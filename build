#!/bin/bash

unset CDPATH
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

set -e

unset cleanup_lodev
unset cleanup_mountpoint
cleanup() {
    [ -n "$NOCLEANUP" ] && exit || true
    [ -z "$cleanup_mountpoint" ] || sudo umount "$cleanup_mountpoint"
    [ -z "$cleanup_lodev" ] || sudo losetup -d "$cleanup_lodev"
}
trap cleanup EXIT

targetdir="$1"

[ -n "$targetdir" ] || {
    echo "usage: build <outputdir>" >&2
    exit 64
}

pushd "$targetdir"

#download
wget -c http://cloud-images.ubuntu.com/releases/13.10/release/ubuntu-13.10-server-cloudimg-amd64-disk1.img
wget -c http://cloud-images.ubuntu.com/releases/13.10/release/ubuntu-13.10-server-cloudimg-amd64.ovf

#conversion to raw
if [ ! -f ubuntu-13.10-server-cloudimg-amd64-disk1.raw ] ; then
    qemu-img convert -O raw ubuntu-13.10-server-cloudimg-amd64-disk1.img ubuntu-13.10-server-cloudimg-amd64-disk1.raw
fi

#growth of the file (64 GB)
size=$((64*1024*1024*1024))
lastsector=$(($size/512-1))
if [ `stat -c%s ubuntu-13.10-server-cloudimg-amd64-disk1.raw` != $size ] ; then
    python -c '
import sys
f = open(sys.argv[1], "ab")
maxsize = long(sys.argv[2])
f.truncate(maxsize)
f.close()
' ubuntu-13.10-server-cloudimg-amd64-disk1.raw $size
fi

#growth of the enclosing partition
if echo p | sudo fdisk ubuntu-13.10-server-cloudimg-amd64-disk1.raw | grep -q $lastsector ; then
    true
else
    echo '
d
n
p



w
' | sudo fdisk ubuntu-13.10-server-cloudimg-amd64-disk1.raw
fi

#mapping to loopback dev
lodev=`
losetup -l | python -c '
import sys
stuffs = dict([ (l[41:-1],l[0:10]) for l in sys.stdin.readlines()[1:] ])
if sys.argv[1] in stuffs:
    print stuffs[sys.argv[1]]
' "$PWD"/ubuntu-13.10-server-cloudimg-amd64-disk1.raw
`
if [ -z "$lodev" ] ; then
    lodev=`sudo losetup -P --find --show "$PWD"/ubuntu-13.10-server-cloudimg-amd64-disk1.raw`
fi
cleanup_lodev="$lodev"

#resize partitions
sudo resize2fs "$lodev"p1

#mount partitions
mkdir -p partition1
mountpoint partition1 || sudo mount "$lodev"p1 partition1
cleanup_mountpoint="$PWD"/partition1

popd

#setup networking in chroot
sudo rm -f "$targetdir"/partition1/etc/resolv.conf
sudo cp /etc/resolv.conf "$targetdir"/partition1/etc/resolv.conf

#fire ansible up
sudo ansible-playbook -c chroot -i "$targetdir"/partition1, "$DIR"/setup.yml

#restore networking in chroot
sudo ln -sf ../run/resolvconf/etc/resolv.conf "$targetdir"/partition1/etc/resolv.conf
