#!/bin/bash

unset CDPATH
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

set -e

unset cleanup_mountpoint
unset cleanup_partition1
unset cleanup_lodev
unset cleanup_bad_ova
unset cleanup_dest_img
unset cleanup_ovf
unset cleanup_original_image
unset cleanup_created_image
cleanup() {
    [ -n "$NOCLEANUP" -a "$1" != "force" ] && exit || true
    [ -z "$cleanup_mountpoint" ] || {
        sudo umount "$cleanup_mountpoint"
        unset cleanup_mountpoint
    }
    [ -z "$cleanup_partition1" ] || {
        sudo rmdir "$cleanup_partition1"
        unset cleanup_partition1
    }
    [ -z "$cleanup_lodev" ] || {
        sudo losetup -d "$cleanup_lodev"
        unset cleanup_lodev
    }
    [ -z "$cleanup_bad_ova" ] || {
        sudo rm -f "$cleanup_bad_ova"
        unset cleanup_bad_ova
    }
    [ -z "$cleanup_dest_img" ] || {
        sudo rm -f "$cleanup_dest_img"
        unset cleanup_dest_img
    }
    [ -z "$cleanup_ovf" ] || {
        sudo rm -f "$cleanup_ovf"
        unset cleanup_ovf
    }
    [ -z "$cleanup_original_image" ] || {
        sudo rm -f "$cleanup_original_image"
        unset cleanup_original_image
    }
    [ -z "$cleanup_created_image" ] || {
        sudo rm -f "$cleanup_created_image"
        unset cleanup_created_image
    }
}
trap cleanup EXIT

targetdir="$1"

[ -n "$targetdir" ] || {
    echo "usage: build <outputdir>" >&2
    exit 64
}

pushd "$targetdir" > /dev/null

#download
if [ ! -f ubuntu-13.10-server-cloudimg-amd64-disk1.raw ] ; then
    wget -c --progress=bar https://cloud-images.ubuntu.com/releases/13.10/release/ubuntu-13.10-server-cloudimg-amd64-disk1.img
fi

#conversion to raw
if [ ! -f ubuntu-13.10-server-cloudimg-amd64-disk1.raw ] ; then
    qemu-img convert -O raw ubuntu-13.10-server-cloudimg-amd64-disk1.img ubuntu-13.10-server-cloudimg-amd64-disk1.raw
fi

#growth of the file (64 GB)
size=$((64*1024*1024*1024))
lastsector=$(($size/512-1))
if [ `stat -c%s ubuntu-13.10-server-cloudimg-amd64-disk1.raw` != $size ] ; then
    python -c '
import sys
f = open(sys.argv[1], "ab")
maxsize = long(sys.argv[2])
f.truncate(maxsize)
f.close()
' ubuntu-13.10-server-cloudimg-amd64-disk1.raw $size
fi

#growth of the enclosing partition
if echo p | sudo fdisk ubuntu-13.10-server-cloudimg-amd64-disk1.raw | grep -q $lastsector ; then
    true
else
    echo '
d
n
p



w
' | sudo fdisk ubuntu-13.10-server-cloudimg-amd64-disk1.raw
fi

#mapping to loopback dev
lodev=`
losetup -l | python -c '
import sys
stuffs = dict([ (l[41:-1],l[0:10]) for l in sys.stdin.readlines()[1:] ])
if sys.argv[1] in stuffs:
    print stuffs[sys.argv[1]]
' "$PWD"/ubuntu-13.10-server-cloudimg-amd64-disk1.raw
`
if [ -z "$lodev" ] ; then
    lodev=`sudo losetup -P --find --show "$PWD"/ubuntu-13.10-server-cloudimg-amd64-disk1.raw`
fi
cleanup_lodev="$lodev"

#resize partitions
if test -d partition1 ; then
    if ! mountpoint -q partition1 ; then
        # do NOT do this if the file system is mounted
        sudo e2fsck -f "$lodev"p1
        sudo resize2fs "$lodev"p1
    fi
fi

#mount partitions
mkdir -p partition1
cleanup_partition1="$PWD"/partition1
mountpoint -q partition1 || sudo mount "$lodev"p1 partition1
cleanup_mountpoint="$PWD"/partition1

popd > /dev/null

#setup networking in chroot
sudo rm -f "$targetdir"/partition1/etc/resolv.conf
sudo cp /etc/resolv.conf "$targetdir"/partition1/etc/resolv.conf

#fool system into believing that shit exists
cleanup_fake="$targetdir"/partition1/fake
for a in initctl invoke-rc.d restart start stop start-stop-daemon service ; do
    sudo mkdir -p "$cleanup_fake"
    echo "#/bin/bash" | sudo tee "$cleanup_fake"/$a > /dev/null
    sudo chmod +x "$cleanup_fake"/$a
done

#fire ansible up
sudo ANSIBLE_NOCOWS=1 PATH=/fake:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin ansible-playbook -c chroot -i "$targetdir"/partition1, "$DIR"/setup.yml

#restore networking in chroot
sudo ln -sf ../run/resolvconf/etc/resolv.conf "$targetdir"/partition1/etc/resolv.conf

#unmount the filesystem
sudo umount "$cleanup_mountpoint"
unset cleanup_mountpoint

#zerofree the partition image
sudo zerofree -v "$lodev"p1

#cleanup everything
cleanup force

#copy the OVF
cp "$DIR"/dts-publishingstudio-13.10-amd64.ovf "$targetdir"
cleanup_ovf="$targetdir"/dts-publishingstudio-13.10-amd64.ovf

pushd "$targetdir" > /dev/null

#create image
cleanup_dest_img="$PWD"/dts-publishingstudio-13.10-amd64-disk1.img
qemu-img convert -S 512 -O qcow2 ubuntu-13.10-server-cloudimg-amd64-disk1.raw dts-publishingstudio-13.10-amd64-disk1.img

#tar it all up
cleanup_bad_ova="$PWD"/dts-publishingstudio-13.10-amd64.ova
tar cv dts-publishingstudio-13.10-amd64-disk1.img dts-publishingstudio-13.10-amd64.ovf | pigz -9 -c > dts-publishingstudio-13.10-amd64.ova
cleanup_bad_ova=

cleanup_original_image="$targetdir"/ubuntu-13.10-server-cloudimg-amd64-disk1.img
cleanup_created_image="$targetdir"/ubuntu-13.10-server-cloudimg-amd64-disk1.raw

popd
